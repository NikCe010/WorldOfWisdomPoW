// Code generated by MockGen. DO NOT EDIT.
// Source: quotes_handler.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "worldofwisdom.com/m/internal/tcp/proto"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// DebugContext mocks base method.
func (m *MockLogger) DebugContext(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DebugContext", varargs...)
}

// DebugContext indicates an expected call of DebugContext.
func (mr *MockLoggerMockRecorder) DebugContext(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugContext", reflect.TypeOf((*MockLogger)(nil).DebugContext), varargs...)
}

// ErrorContext mocks base method.
func (m *MockLogger) ErrorContext(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ErrorContext", varargs...)
}

// ErrorContext indicates an expected call of ErrorContext.
func (mr *MockLoggerMockRecorder) ErrorContext(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorContext", reflect.TypeOf((*MockLogger)(nil).ErrorContext), varargs...)
}

// InfoContext mocks base method.
func (m *MockLogger) InfoContext(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InfoContext", varargs...)
}

// InfoContext indicates an expected call of InfoContext.
func (mr *MockLoggerMockRecorder) InfoContext(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoContext", reflect.TypeOf((*MockLogger)(nil).InfoContext), varargs...)
}

// WarnContext mocks base method.
func (m *MockLogger) WarnContext(ctx context.Context, msg string, args ...any) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WarnContext", varargs...)
}

// WarnContext indicates an expected call of WarnContext.
func (mr *MockLoggerMockRecorder) WarnContext(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnContext", reflect.TypeOf((*MockLogger)(nil).WarnContext), varargs...)
}

// MockQuotesStorage is a mock of QuotesStorage interface.
type MockQuotesStorage struct {
	ctrl     *gomock.Controller
	recorder *MockQuotesStorageMockRecorder
}

// MockQuotesStorageMockRecorder is the mock recorder for MockQuotesStorage.
type MockQuotesStorageMockRecorder struct {
	mock *MockQuotesStorage
}

// NewMockQuotesStorage creates a new mock instance.
func NewMockQuotesStorage(ctrl *gomock.Controller) *MockQuotesStorage {
	mock := &MockQuotesStorage{ctrl: ctrl}
	mock.recorder = &MockQuotesStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotesStorage) EXPECT() *MockQuotesStorageMockRecorder {
	return m.recorder
}

// GetRandomQuote mocks base method.
func (m *MockQuotesStorage) GetRandomQuote() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuote")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRandomQuote indicates an expected call of GetRandomQuote.
func (mr *MockQuotesStorageMockRecorder) GetRandomQuote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuote", reflect.TypeOf((*MockQuotesStorage)(nil).GetRandomQuote))
}

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConn) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close), ctx)
}

// Read mocks base method.
func (m *MockConn) Read(ctx context.Context) (*proto.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].(*proto.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockConnMockRecorder) Read(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockConn)(nil).Read), ctx)
}

// Send mocks base method.
func (m *MockConn) Send(ctx context.Context, request *proto.SendRequestV1) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockConnMockRecorder) Send(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockConn)(nil).Send), ctx, request)
}

// MockPOWGenerator is a mock of POWGenerator interface.
type MockPOWGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockPOWGeneratorMockRecorder
}

// MockPOWGeneratorMockRecorder is the mock recorder for MockPOWGenerator.
type MockPOWGeneratorMockRecorder struct {
	mock *MockPOWGenerator
}

// NewMockPOWGenerator creates a new mock instance.
func NewMockPOWGenerator(ctrl *gomock.Controller) *MockPOWGenerator {
	mock := &MockPOWGenerator{ctrl: ctrl}
	mock.recorder = &MockPOWGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPOWGenerator) EXPECT() *MockPOWGeneratorMockRecorder {
	return m.recorder
}

// CheckNonce mocks base method.
func (m *MockPOWGenerator) CheckNonce(nonceBytes, data []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNonce", nonceBytes, data)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckNonce indicates an expected call of CheckNonce.
func (mr *MockPOWGeneratorMockRecorder) CheckNonce(nonceBytes, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNonce", reflect.TypeOf((*MockPOWGenerator)(nil).CheckNonce), nonceBytes, data)
}

// Generate mocks base method.
func (m *MockPOWGenerator) Generate(ctx context.Context) ([]byte, byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Generate indicates an expected call of Generate.
func (mr *MockPOWGeneratorMockRecorder) Generate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockPOWGenerator)(nil).Generate), ctx)
}
